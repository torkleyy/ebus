var searchIndex = new Map(JSON.parse('[\
["energy_bus",{"doc":"eBUS","t":"FFFRPSSPPFPPGPPPFPPFPGFPKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNOONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOMNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOO","n":["Buffer","Crc","EbusDriver","Error","ExpectReply","MAX_BUF","MAX_BUF_U8","MasterAckErr","MasterAckOk","MasterTelegram","NeedsDataCrc","None","ProcessResult","Reply","ReplyCrcError","Request","RequestToken","SlaveAckErr","SlaveAckOk","Telegram","TelegramCrcError","TelegramFlag","TelegramFlags","Timeout","Transmit","add","add_decoded","add_multiple","as_bytes","as_bytes_mut","as_reply","as_request","bitand","bitor","bitor","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","calc_crc","clear_buffer","clone","clone","clone","clone","clone","data","dest","eq","eq","eq","eq","eq","eq","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_parts","from_slice","into","into","into","into","into","into","into","into","into","is_none","is_time_critical","new","new","none","process","reply_ack","reply_as_slave","reset_syn","reset_wait_syn","service","src","telegram","transmit_raw","transmit_syn","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","data","telegram","token"],"q":[[0,"energy_bus"],[140,"energy_bus::ProcessResult"],[143,"core::option"],[144,"core::result"],[145,"core::fmt"],[146,"core::fmt"],[147,"core::ops::function"],[148,"core::any"]],"d":["","","","","Whether or not to wait for the recipient to reply","","","We sent master-slave, slave did not acknowledge","We sent master-slave, slave acknowledged","Telegram to be sent","Whether the data is expected to have an additional CRC …","","","Slave sent reply","CRC check of reply failed (sent by another slave)","Master-slave request","","We replied as slave, master did not acknowledge","We replied as slave, master acknowledged","","CRC check of telegram failed (sent by another master)","","","Expected recipient to send, but AUTO-SYN occurred","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Empty the tx buffer so no more bytes get sent.","","","","","","Up to MAX_BUF data bytes","ZZ - destination eBUS address","","","","","","","Options for the handling of this telegram","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Create <code>Buffer</code> from byte slice with at most MAX_BUF …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Indicates whether the next byte needs to be supplied with …","","","","","","Reply to a received master-slave telegram","this should be called if we receive SYN","","Service command, encoded LSB first","QQ - source eBUS address","Core telegram data","Write all bytes to UART / put them into tx buffer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,11,9,0,0,5,5,0,9,5,0,5,5,5,0,5,5,0,5,0,0,5,0,1,1,1,4,4,5,5,8,9,9,8,21,1,15,7,4,9,8,5,17,21,1,15,7,4,9,8,5,17,1,11,15,7,4,9,8,7,7,7,4,9,8,5,17,15,1,15,7,4,9,8,5,17,21,1,15,7,4,9,8,5,17,4,4,21,1,15,7,4,9,8,5,17,5,21,21,1,8,21,21,21,21,21,7,7,15,11,11,21,1,15,7,4,9,8,5,17,21,1,15,7,4,9,8,5,17,21,1,15,7,4,9,8,5,17,25,26,26],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],1],[[1,[3,[2]]],1],[[1,[3,[2]]],1],[4,[[3,[2]]]],[4,[[3,[2]]]],[5,[[6,[[3,[2]]]]]],[5,[[6,[7]]]],[[8,9],-1,[]],[[9,9],-1,[]],[[9,8],-1,[]],[[8,9],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[[11,[],[[10,[-1]]]]],[[13,[12,-1]]],14],[15,15],[7,7],[4,4],[9,9],[8,8],0,0,[[7,7],16],[[4,4],16],[[9,9],16],[[8,8],16],[[5,5],16],[[17,17],16],0,[[1,18],19],[[15,18],19],[[7,18],19],[[4,18],19],[[9,18],19],[[8,18],19],[[5,18],19],[[17,18],19],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[20,[2]],2],4],[[[3,[2]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,16],[21,16],[[22,2,2,2],21],[2,1],[[],8],[[21,2,-1,-2,[6,[15]],16],[[13,[5]]],11,[[23,[22]]]],[[21,-1,17],[[13,[12]]],11],[[21,[3,[2]],-1,17],[[13,[12]]],11],[21,12],[21,12],0,0,0,[[[11,[],[[10,[-1]]]],[3,[2]]],[[13,[12,-1]]],14],[[[11,[],[[10,[-1]]]]],[[13,[12,-1]]],14],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],[-1,24,[]],0,0,0],"c":[],"p":[[5,"Crc",0],[1,"u8"],[1,"slice"],[5,"Buffer",0],[6,"ProcessResult",0],[6,"Option",143],[5,"Telegram",0],[5,"TelegramFlags",0],[6,"TelegramFlag",0],[17,"Error"],[10,"Transmit",0],[1,"tuple"],[6,"Result",144],[10,"Debug",145],[5,"MasterTelegram",0],[1,"bool"],[5,"RequestToken",0],[5,"Formatter",145],[8,"Result",145],[1,"array"],[5,"EbusDriver",0],[5,"Duration",146],[10,"Fn",147],[5,"TypeId",148],[15,"Reply",140],[15,"Request",140]],"b":[[33,"impl-BitOr-for-TelegramFlag"],[34,"impl-BitOr%3CTelegramFlags%3E-for-TelegramFlag"]]}],\
["log",{"doc":"A lightweight logging facade.","t":"PPPPPPGGKFFPFFFSFPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNQNNMNNNNNNNQNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNMQQHNNHNNNNNNNNNNNNNNHHHHNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNQ","n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","cmp","cmp","cmp","cmp","debug","default","default","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","file_static","file_static","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","iter","iter","level","level","level","level","line","line","log","log","log_enabled","logger","max","max","max_level","metadata","metadata","module_path","module_path","module_path_static","module_path_static","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_logger","set_logger_racy","set_max_level","set_max_level_racy","target","target","target","target","to_level","to_level_filter","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":[[0,"log"],[170,"core::fmt"],[171,"core::cmp"],[172,"core::option"],[173,"core::fmt"],[174,"core::hash"],[175,"core::iter::traits::iterator"],[176,"core::any"]],"d":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","Returns the string representation of the <code>Level</code>.","Returns the string representation of the <code>LevelFilter</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","Logs a message at the debug level.","","","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>file</code> to a <code>&#39;static</code> string.","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","Iterate through all supported filtering levels.","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","The module path of the message, if it is a <code>&#39;static</code> string.","Set <code>module_path</code> to a <code>&#39;static</code> string","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>&amp;&#39;static Log</code>.","A thread-unsafe version of <code>set_logger</code>.","Sets the global maximum log level.","A thread-unsafe version of <code>set_max_level</code>.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[4,6,4,6,4,6,0,0,0,0,0,6,0,0,0,0,0,4,6,4,6,1,3,4,6,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,3,7,1,8,4,6,1,8,4,6,8,7,0,3,7,10,4,4,6,6,8,7,12,0,1,3,1,3,10,4,4,6,6,1,3,8,7,17,17,12,12,4,6,1,3,8,7,17,12,4,6,4,6,8,7,0,4,6,1,3,8,7,17,12,4,6,1,3,8,7,1,3,10,0,0,0,4,6,0,1,3,1,3,1,3,3,7,4,4,6,6,8,7,0,0,0,0,1,3,8,7,6,4,0,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,4,6,1,3,8,7,17,12,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,2],3],[4,5],[6,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,1],[7,8],[[],3],[[],7],[4,4],[6,6],[1,1],[8,8],[[4,4],9],[[6,6],9],[[8,8],9],[[7,7],9],0,[[],3],[[],7],[[10,8],11],[[4,4],11],[[4,6],11],[[6,4],11],[[6,6],11],[[8,8],11],[[7,7],11],[[12,12],11],0,[1,[[13,[5]]]],[[3,[13,[5]]],3],[1,[[13,[5]]]],[[3,[13,[5]]],3],[10,14],[[4,15],16],[[4,15],16],[[6,15],16],[[6,15],16],[[1,15],16],[[3,15],16],[[8,15],16],[[7,15],16],[[17,15],16],[[17,15],16],[[12,15],16],[[12,15],16],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[5,[[18,[4,-1]]],[]],[5,[[18,[6,-1]]],[]],[[4,-1],14,19],[[6,-1],14,19],[[8,-1],14,19],[[7,-1],14,19],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[0,[[21,[],[[20,[4]]]]]]]],[[],[[0,[[21,[],[[20,[6]]]]]]]],[1,4],[[3,4],3],[8,4],[[7,4],7],[1,[[13,[22]]]],[[3,[13,[22]]],3],[[10,1],14],0,0,[[],10],[[],4],[[],6],[[],6],[1,8],[[3,8],3],[1,[[13,[5]]]],[[3,[13,[5]]],3],[1,[[13,[5]]]],[[3,[13,[5]]],3],[[],3],[[],7],[[4,6],[[13,[9]]]],[[4,4],[[13,[9]]]],[[6,4],[[13,[9]]]],[[6,6],[[13,[9]]]],[[8,8],[[13,[9]]]],[[7,7],[[13,[9]]]],[10,[[18,[14,17]]]],[10,[[18,[14,17]]]],[6,14],[6,14],[1,5],[[3,5],3],[8,5],[[7,5],7],[6,[[13,[4]]]],[4,6],0,[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,[[18,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],0],"c":[],"p":[[5,"Record",0],[5,"Arguments",170],[5,"RecordBuilder",0],[6,"Level",0],[1,"str"],[6,"LevelFilter",0],[5,"MetadataBuilder",0],[5,"Metadata",0],[6,"Ordering",171],[10,"Log",0],[1,"bool"],[5,"ParseLevelError",0],[6,"Option",172],[1,"tuple"],[5,"Formatter",170],[8,"Result",170],[5,"SetLoggerError",0],[6,"Result",173],[10,"Hasher",174],[17,"Item"],[10,"Iterator",175],[1,"u32"],[5,"TypeId",176]],"b":[[57,"impl-PartialEq-for-Level"],[58,"impl-PartialEq%3CLevelFilter%3E-for-Level"],[59,"impl-PartialEq%3CLevel%3E-for-LevelFilter"],[60,"impl-PartialEq-for-LevelFilter"],[70,"impl-Display-for-Level"],[71,"impl-Debug-for-Level"],[72,"impl-Display-for-LevelFilter"],[73,"impl-Debug-for-LevelFilter"],[78,"impl-Display-for-SetLoggerError"],[79,"impl-Debug-for-SetLoggerError"],[80,"impl-Display-for-ParseLevelError"],[81,"impl-Debug-for-ParseLevelError"],[128,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[129,"impl-PartialOrd-for-Level"],[130,"impl-PartialOrd%3CLevel%3E-for-LevelFilter"],[131,"impl-PartialOrd-for-LevelFilter"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
